// Navy ~ 0.2-lite
// <ds>Drawing lines [Tap + Hold]</ds>

[OVERLAY name = LineToolHorizontalRay, ctx = Canvas, verion = 1.0.0]

prop('color', { type: 'Color', def: '#b98200' })

let timeId = null
let mouseX = 0
let lines = {} // Line objects stored by uuid

init()
{
    $core.dataExt.lines = $core.data;

    // Restore lines from dataExt
    for (var line of $core.dataExt.lines || []) {
        lines[line.uuid] = new $lib.TrendLine($core, line)
        lines[line.uuid].onSelect = lineSelected
    }
}

draw(ctx)
{
    if (!$core.dataExt.lines?.length && lines) {
        Object.values(lines).forEach(x => removeLine(x.data.uuid))
    }

    const currentPrice = $core.hub?.mainOv?.data?.[$core.hub.mainOv.data.length - 1]?.[4] ?? 0;

    for (var line of Object.values(lines)) {
        line.draw(ctx)
        const lineData = line.line;

        // Draw text
        ctx.font = '10px Quantico';
        ctx.fillStyle = $props.color;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        if (line.pins[0].y$ > currentPrice) {
            ctx.fillText(line.pins[0].y$.toFixed($core.layout.prec), lineData.x1, lineData.y1 - 10);
        } else {
            ctx.fillText(line.pins[0].y$.toFixed($core.layout.prec), lineData.x1, lineData.y1 + 10);
        }
    }
}

newLine()
{

    if (unfinishedLines() || mouseMoved()) return

    if (!$core.dataExt.lines) {
        $core.dataExt.lines = []
    }

    let t = $core.cursor.time
    let $ = $core.layout.y2value($core.cursor.y)
    let uuid = $lib.Utils.uuid3()

    let line = {
        type: 'ray',
        p1: [t, $],
        uuid: uuid,
        lineWidth: $props.lineWidth,
        color: $props.color
    }
    $core.dataExt.lines.push(line)
    lines[uuid] = new $lib.TrendLine($core, line, true)
    lines[uuid].onSelect = lineSelected
    lines[uuid].selected = true


    $events.emit('update-layout')
}

lineSelected($uuid)
{
    if (!$uuid) {
        $events.emit('object-selected', {id: undefined, type: undefined});
    }

    for (var uuid in lines) {
        const selected = uuid === $uuid;
        lines[uuid].selected = selected;
        if (selected) {
            $events.emit('object-selected', {id: uuid, type: 'LineToolHorizontalRay'});
        }
    }
    $events.emit('update-layout')
}

unfinishedLines()
{

    for (var line of Object.values(lines)) {
        if (line.pins.some(x => x.state !== 'settled')) {
            return true
        }
    }
    return false
}

mouseMoved()
{
    let d = Math.abs(mouseX - $core.mouse.x)
    return d > 5
}

removeLine(uuid)
{
    delete lines[uuid]
    $core.dataExt.lines = $core.dataExt.lines?.filter(x => x.uuid !== uuid) ?? [];
    $events.emit('update-layout')

    $events.emit('change-tool-data', {
        data: $core.dataExt.lines,
        id: $core.id
    });
    $events.emit('object-selected', {id: undefined, type: undefined});
}

propagate(name, data)
{
    // TODO: sort by z-index
    for (var line of Object.values(lines)) {
        line[name](data)
    }
}

mousedown(event)
{
    if ($core.meta.tool === 'LineToolHorizontalRay' || event.which === 3) {
        timeId = setTimeout(newLine, 0)
    }

    mouseX = $core.mouse.x
    lineSelected(null)
    $events.emit('update-layout')
    propagate('mousedown', event)
}

mouseup(event)
{
    clearTimeout(timeId)
    timeId = null
    propagate('mouseup', event)
    $events.emit('drawing-mode-off');

    let s = Object.values(lines).find(x => x.selected);
    if (s) {
        $events.emit('change-tool-data', {
            data: $core.dataExt.lines,
            id: $core.id
        });
    }
}

mousemove(event)
{
    propagate('mousemove', event)
}

keydown(event)
{
    if (event.code === 'Backspace' || event.code === 'Delete') {
        let s = Object.values(lines).find(x => x.selected)
        if (s) removeLine(s.data.uuid)
    }
}

let initialLow = 0;
let initialHigh = 0;
yRange(data, a, low)
{
    const updData = $core.data.slice(-500);
    let len = updData.length;

    var h, l, high = -Infinity, low = Infinity
    if (initialLow && initialHigh) {
        low = initialLow;
        high = initialHigh;
    } else {
        for (var i = 0; i < len; i++) {
            let point = updData[i];
            if (!point) {
                break;
            }
            if (point[2] > high) high = point[2];
            if (point[3] < low) low = point[3];
        }
        initialLow = low;
        initialHigh = high;
    }
    return [high, low]
}

legend()
=>
null