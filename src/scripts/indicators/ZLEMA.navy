// Navy ~ 0.2-lite

// <ds>Zero-Lag Exponential Moving Average (ZLEMA) Indicator</ds>
// Plots Fast, Medium, and Slow ZLEMA lines. Optionally uses a Kalman filter
// on the source and shows crossover signals between Fast and Medium ZLEMA.
//
// Key Configuration Properties:
// <src> :: Input data source for calculations (e.g., 'close', 'hlc3').
// <enableKalman> :: 'ON' to apply Kalman filter to source, 'OFF' otherwise.
// <fast> :: Period for the Fast ZLEMA.
// <medium> :: Period for the Medium ZLEMA.
// <slow> :: Period for the Slow ZLEMA.
// <showCross> :: true to display buy/sell signals on Fast/Medium ZLEMA crossover/crossunder, false otherwise.

[INDICATOR name=ZLEMA,ctx=Canvas, version=1.0.0]

// Input properties
prop('src', { type: 'source', def: 'hlc3', label: 'Source' });
prop('enableKalman', { type: 'string', def: 'ON', label: 'Kalman Filter', options: ['ON', 'OFF'] });
prop('fast', { type: 'integer', def: 8, label: 'Fast Period', min: 1 });
prop('medium', { type: 'integer', def: 21, label: 'Medium Period', min: 1 });
prop('slow', { type: 'integer', def: 55, label: 'Slow Period', min: 1 });
prop('showCross', { type: 'boolean', def: true, label: 'Show Cross' });
prop('colorFast', { type: 'color', def: '#FFA500', label: 'Fast Color' });
prop('colorMedium', { type: 'color', def: '#00FFFF', label: 'Medium Color' });
prop('colorSlow', { type: 'color', def: '#888888', label: 'Slow Color' });
prop('signalSize', { type: 'integer', def: 7, label: 'Signal Size' });
prop('buyColor', { type: 'color', def: '#08c65e', label: 'Buy Signal Color' });
prop('sellColor', { type: 'color', def: '#e42633', label: 'Sell Signal Color' });
prop('prec', { type: 'integer', def: autoPrec(), label: 'Precision' });

// Define overlay settings
this.specs = {
    name: `ZLEMA ${$props.medium}`,
    settings: { precision: $props.prec, zIndex: 0 }
};


[UPDATE]

// Get source based on property
let src;
if ($props.src === 'open') src = open;
else if ($props.src === 'high') src = high;
else if ($props.src === 'low') src = low;
else if ($props.src === 'close') src = close;
else if ($props.src === 'hl2') src = ts((high[0] + low[0]) / 2);
else if ($props.src === 'hlc3') src = ts((high[0] + low[0] + close[0]) / 3);
else if ($props.src === 'ohlc4') src = ts((open[0] + high[0] + low[0] + close[0]) / 4);
else src = close;

// Apply Kalman filter if enabled
let base = $props.enableKalman === 'ON' 
    ? kalmanFilter(src)
    : src;
base = ts((base[0] !== null ? Math.round(base[0] * 100) / 100 : 0));
// Zero-Lag EMA implementation
const fastLag = Math.floor(($props.fast - 1) / 2);
const mediumLag = Math.floor(($props.medium - 1) / 2);
const slowLag = Math.floor(($props.slow - 1) / 2);

// Create lag-adjusted time series
let fastSrc = ts(0);
let mediumSrc = ts(0); 
let slowSrc = ts(0);

// Calculate lag-adjusted values 
fastSrc[0] = 2 * base[0] - base[fastLag];
mediumSrc[0] = 2 * base[0] - base[mediumLag];
slowSrc[0] = 2 * base[0] - base[slowLag];

// Apply EMA to the lag-adjusted time series
const ma1_data = ema(fastSrc, $props.fast).map(x => x !== null ? Math.round(x * 100) / 100 : 0);
const ma2_data = ema(mediumSrc, $props.medium).map(x => x !== null ? Math.round(x * 100) / 100 : 0);
const ma3_data = ema(slowSrc, $props.slow).map(x => x !== null ? Math.round(x * 100) / 100 : 0);

// Create the overlay objects with proper color props
Spline(ma1_data, { 
    name: `Fast ZLEMA (${$props.fast})`,
    props: {
        color: $props.colorFast,
        lineWidth: 2
    }
});

Spline(ma2_data, { 
    name: `Medium ZLEMA (${$props.medium})`,
    props: {
        color: $props.colorMedium,
        lineWidth: 2
    }
});

Spline(ma3_data, { 
    name: `Slow ZLEMA (${$props.slow})`,
    props: {
        color: $props.colorSlow,
        lineWidth: 1
    }
});

// Track crossover signals in a custom overlay
if ($props.showCross && ma1_data && ma2_data) {
    // Check for crossover (fast crosses above medium)
    const isCrossover = ma1_data[0] > ma2_data[0] && ma1_data[1] <= ma2_data[1];
    
    // Check for crossunder (fast crosses below medium)
    const isCrossunder = ma1_data[0] < ma2_data[0] && ma1_data[1] >= ma2_data[1];
    
    // Store signals for drawing
    if (isCrossover || isCrossunder) {
        // Create properly formatted signal for ArrowTrades
        // Format must be an array of signals in the format [[timestamp, [dir, label, big]]]
        const direction = isCrossover ? 1 : -1;  // 1 for buy, -1 for sell
        const label = isCrossover ? "BUY" : "SELL";
        const big = false;  // Can set to true for emphasized signals if needed
        
        // Create an array with a single signal
        const signals = [
            se.t, [direction, label, big]  // Wrap in an extra array
        ];
        
        // Pass the signals array to ArrowTrades
        ArrowTrades(signals,{
            name: "ZLEMA Signals",
            props: {
                buyColor: $props.buyColor,
                sellColor: $props.sellColor,
                size: $props.signalSize,
                showLabels: false,
                markerOutline: true,
                outlineWidth: 6
            }, 
            settings: {
                zIndex: 200
            }
        } );
    }
}
