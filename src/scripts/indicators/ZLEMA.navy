[INDICATOR name=ZLEMA, version=1.0.0]

// Input properties
prop('src', { type: 'source', def: 'hlc3', label: 'Source' });
prop('enableKalman', { type: 'string', def: 'ON', label: 'Kalman Filter', options: ['ON', 'OFF'] });
prop('fast', { type: 'integer', def: 8, label: 'Fast Period', min: 1 });
prop('medium', { type: 'integer', def: 21, label: 'Medium Period', min: 1 });
prop('slow', { type: 'integer', def: 55, label: 'Slow Period', min: 1 });
prop('showCross', { type: 'boolean', def: true, label: 'Show Cross' });
prop('colorFast', { type: 'color', def: '#FFA500', label: 'Fast Color' });
prop('colorMedium', { type: 'color', def: '#00FFFF', label: 'Medium Color' });
prop('colorSlow', { type: 'color', def: '#888888', label: 'Slow Color' });
prop('signalSize', { type: 'integer', def: 7, label: 'Signal Size' });
prop('buyColor', { type: 'color', def: '#08c65e', label: 'Buy Signal Color' });
prop('sellColor', { type: 'color', def: '#e42633', label: 'Sell Signal Color' });
prop('prec', { type: 'integer', def: autoPrec(), label: 'Precision' });

// Define overlay settings
this.specs = {
    name: `ZLEMA ${$props.medium}`,
    settings: { precision: $props.prec, zIndex: 0 }
};

// Store signals for drawing
this.signals = [];

// Draw arrow for crossovers/crossunders
function drawArrow(ctx, x, y, dir, size) {
    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(x + size * dir * 0.63, y + size * dir);
    ctx.lineTo(x - size * dir * 0.63, y + size * dir);
    ctx.fill();
}

[UPDATE]

// Get source based on property
let src;
if ($props.src === 'open') src = open;
else if ($props.src === 'high') src = high;
else if ($props.src === 'low') src = low;
else if ($props.src === 'close') src = close;
else if ($props.src === 'hl2') src = ts((high[0] + low[0]) / 2);
else if ($props.src === 'hlc3') src = ts((high[0] + low[0] + close[0]) / 3);
else if ($props.src === 'ohlc4') src = ts((open[0] + high[0] + low[0] + close[0]) / 4);
else src = close;

// Apply Kalman filter if enabled
let base = $props.enableKalman === 'ON' 
    ? kalmanFilter(src)
    : src;

// Zero-Lag EMA implementation
const fastLag = Math.floor(($props.fast - 1) / 2);
const mediumLag = Math.floor(($props.medium - 1) / 2);
const slowLag = Math.floor(($props.slow - 1) / 2);

// Create lag-adjusted time series
let fastSrc = ts(0);
let mediumSrc = ts(0); 
let slowSrc = ts(0);

// Calculate lag-adjusted values 
fastSrc[0] = 2 * base[0] - base[fastLag];
mediumSrc[0] = 2 * base[0] - base[mediumLag];
slowSrc[0] = 2 * base[0] - base[slowLag];

// Apply EMA to the lag-adjusted time series
const ma1_data = ema(fastSrc, $props.fast);
const ma2_data = ema(mediumSrc, $props.medium);
const ma3_data = ema(slowSrc, $props.slow);

// Create the overlay objects with proper color props
Spline(ma1_data, { 
    name: `Fast ZLEMA (${$props.fast})`,
    props: {
        color: $props.colorFast,
        lineWidth: 2
    }
});

Spline(ma2_data, { 
    name: `Medium ZLEMA (${$props.medium})`,
    props: {
        color: $props.colorMedium,
        lineWidth: 2
    }
});

Spline(ma3_data, { 
    name: `Slow ZLEMA (${$props.slow})`,
    props: {
        color: $props.colorSlow,
        lineWidth: 1
    }
});

// Track crossover signals in a custom overlay
if ($props.showCross && ma1_data && ma2_data) {
    // Check for crossover (fast crosses above medium)
    const isCrossover = ma1_data[0] > ma2_data[0] && ma1_data[1] <= ma2_data[1];
    
    // Check for crossunder (fast crosses below medium)
    const isCrossunder = ma1_data[0] < ma2_data[0] && ma1_data[1] >= ma2_data[1];
    
    // Store signals for drawing
    if (isCrossover || isCrossunder) {
        let signal = [
            se.t,  // timestamp
            isCrossover ? 1 : -1,  // direction (1 for buy, -1 for sell)
            isCrossover ? ma1_data[0] : ma2_data[0]  // price level
        ];
        
        // Use the ArrowTrades overlay directly, which has built-in arrow drawing
        ArrowTrades([signal], {
            name: "ZLEMA Signals",
            props: {
                buyColor: $props.buyColor,
                sellColor: $props.sellColor,
                size: $props.signalSize,
                showLabels: false
            }
        });
    }
}
